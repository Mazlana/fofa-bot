const axios = require('axios');
const fs = require('fs');
const cheerio = require('cheerio');
const TelegramBot = require('node-telegram-bot-api');

// Token bot Telegram Anda
const token = '7425648739:AAFYyYamWJIZjAICZ-W2ZjSABnZI5oWl73w';

// Inisialisasi bot
const bot = new TelegramBot(token, { polling: true });

// Fungsi untuk menyimpan cookie ke dalam file
function saveCookie(chatId, cookie) {
    fs.writeFileSync(`${chatId}.txt`, cookie);
}

function readCookie(chatId) {
    try {
        const cookie = fs.readFileSync(`${chatId}.txt`, 'utf8').trim();
        return cookie;
    } catch (error) {
        console.error('Error reading cookie:', error);
        return null;
    }
}

// Fungsi untuk mengecek apakah cookie sudah tersimpan
function isCookieSaved(chatId) {
    return fs.existsSync(`${chatId}.txt`);
}

function timer(seconds, message) {
    return new Promise(resolve => {
        const interval = setInterval(() => {
            process.stdout.write(`\r${message} ${seconds}s remaining`);
            seconds--;
            if (seconds < 0) {
                clearInterval(interval);
                resolve();
            }
        }, 1000);
    });
}

// Mendengarkan pesan dari pengguna
bot.on('message', (msg) => {
    const chatId = msg.chat.id;

    // Jika pesan berupa perintah untuk menyimpan cookie
    if (msg.text && msg.text.startsWith('/setcookie')) {
        const cookie = msg.text.replace('/setcookie', '').trim();
        
        // Periksa apakah cookie tidak kosong
        if (cookie.length > 0) {
            // Simpan cookie dalam file jika belum tersimpan
            if (!isCookieSaved(chatId)) {
                saveCookie(chatId, cookie);
                bot.sendMessage(chatId, 'Cookie telah disimpan.');
            } else {
                bot.sendMessage(chatId, 'Cookie sudah tersimpan sebelumnya.');
            }
        } else {
            bot.sendMessage(chatId, 'Cookie tidak boleh kosong. Silakan coba lagi.');
        }
    }

    // Tambahkan penanganan untuk kasus di mana cookie belum tersimpan
    else if (!isCookieSaved(chatId)) {
        bot.sendMessage(chatId, 'Silakan kirimkan cookie Anda dengan perintah /setcookie terlebih dahulu.');
    }

    // Jika pesan berupa perintah untuk memulai scraping
    else if (msg.text && msg.text.startsWith('/scrape')) {
        // Parsing query kustom jika ada
        let query = 'server=="cloudflare" && port="443" && is_domain=false && banner="CF-RAY: -" && banner="Content-Length: 155" && banner="HTTP/1.1 400 Bad Request" && protocol="https"';
        const queryParts = msg.text.split(' ').slice(1).join(' ').trim(); // Ambil semua kata setelah '/scrape' sebagai query kustom
        if (queryParts.length > 0) {
            query = queryParts; // Jika ada query kustom, gunakan itu
        }

        // Memulai proses scraping dan mengirimkan hasil
        scrapeDataAndSendResults(chatId, query);
    }
});

console.log('Bot telah diaktifkan. Menunggu pesan dari pengguna...');

// Fungsi untuk mengirimkan pesan ke pengguna
function sendMessage(chatId, message) {
    bot.sendMessage(chatId, message);
}

async function GET(url, headers) {
    try {
        const response = await axios.get(url, { headers });
        return response.data;
    } catch (error) {
        console.error(`Error fetching URL ${url}:`, error);
        return null;
    }
}

async function getCountryInfo(ip) {
    try {
        const response = await axios.get(`http://ip-api.com/json/${ip}`);
        return response.data;
    } catch (error) {
        console.error(`Error fetching info for IP ${ip}:`, error);
        return null;
    }
}

// Fungsi untuk mengirim pesan ke Telegram dengan format yang rapi
async function sendMessageWithFormat(chatId, message) {
    try {
        // Format pesan dengan menggunakan Markdown
        const formattedMessage = `
\`\`\`
IP ADDRESS            COUNTRY             ORGANIZATION
--------------------------------------------------------
${message}
\`\`\`
        `;
        // Kirim pesan ke Telegram
        await bot.sendMessage(chatId, formattedMessage, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('Error sending message:', error);
    }
}

// Fungsi untuk melakukan scraping data dan mengirimkan hasil ke pengguna
async function scrapeDataAndSendResults(chatId, query) {
    try {
        // Mengambil URL dashboard dan data cookie
        const idcookie = readCookie(chatId);
        const dashboardUrl = 'https://en.fofa.info/userInfo';
        const headers = {
            'User-Agent': "Mozilla/5.0 (Linux; Android 11; RMX3195) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.66 Mobile Safari/537.36", // Ganti dengan User-Agent Anda
            'Cookie': `fofa_token=${idcookie}` // Menggunakan cookie yang disimpan sebelumnya
        };
        const dashboardData = await GET(dashboardUrl, headers);

        // Melakukan parsing HTML untuk mendapatkan email
        const $ = cheerio.load(dashboardData);
        const email = $('span[data-v-69c19a4c]').first().text().trim();
        const responseMsg = `Logged in as: ${email}\n\nMemulai proses scraping...`;
        sendMessage(chatId, responseMsg);

        // Menyiapkan parameter untuk scraping data
        console.log(query) 
        const base64Query = Buffer.from(query).toString('base64');
        const pageSize = 10;
        const totalPages = 6;

        // Set untuk menyimpan IP unik
        let allUniqueIPs = new Set();

        // Melakukan scraping halaman-halaman data
        for (let page = 1; page <= totalPages; page++) {
            const url = `https://en.fofa.info/result?qbase64=${encodeURIComponent(base64Query)}&page=${page}&page_size=${pageSize}`;
            const html = await GET(url, headers);
            if (html) {
                fs.writeFileSync(`index${page}.html`, html);
            } else {
                console.log(`Failed to scrape page ${page}`);
                continue;
            }

            console.log(`Scraping page ${page}...`);
            await timer(5, 'Scraping');

            const $ = cheerio.load(html);
            const ipPattern = /\b(?:\d{1,3}\.){3}\d{1,3}\b/g;
            const matches = html.match(ipPattern);
            if (matches) {
                matches.forEach(ip => allUniqueIPs.add(ip));
            }
        }

        const uniqueIPs = Array.from(allUniqueIPs);
        const responseMsg2 = '\nProses scraping selesai. Mengirimkan hasil...';
        sendMessage(chatId, responseMsg2);

        let ipListMsg = '';
        for (const ip of uniqueIPs) {
            const countryInfo = await getCountryInfo(ip);
            const country = countryInfo ? countryInfo.country || 'Unknown' : 'Unknown';
            const org = countryInfo ? countryInfo.org || 'Unknown' : 'Unknown';
            ipListMsg += `${ip.padEnd(20)} ${country.padEnd(20)} ${org}\n`;
        }

        // Kirim hasil scraping dengan format yang rapi
        await sendMessageWithFormat(chatId, ipListMsg);
    } catch (error) {
        console.error('Error scraping data and sending results:', error);
    }
}
